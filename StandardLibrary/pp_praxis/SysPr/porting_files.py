import math, os, glob, sysfrom exceptions import RuntimeErrordef split(file_source,dir_target,chunk_size):  # check file_sourse   if not (os.path.exists(file_source) and os.path.isfile(file_source)):    raise RuntimeError("the source file doesn't exists")    # check dir_target  if not (os.path.exists(dir_target) and os.path.isdir(dir_target)):    raise RuntimeError("the target directory doesn't exists")  if os.listdir(dir_target) != []:    raise RuntimeError("target directory doesn't empty")    # splitting  with open(file_source,"rb") as source:    # chunk quantity    n = len(str(math.ceil(os.path.getsize(file_source)/float(chunk_size))))    i = 1    while True:      chunk = source.read(chunk_size)      if chunk == "": break            file_target = ("part%0"+str(n)+"d") % i      with open(os.path.join(dir_target,file_target),"wb") as target:        target.write(chunk)            i+=1    def join(dir_source,file_target):    # check dir_source  if not (os.path.exists(dir_source) and os.path.isdir(dir_source)):    raise RuntimeError("the source file doesn't exists")    # check file_target  if not os.path.exists(os.path.dirname(file_target)):    raise RuntimeError("the target directory doesn't exists")    with open(file_target,"wb") as target:    for file in sorted(glob.glob(os.path.join(dir_source,"part*"))):      with open(file,"rb") as source:        target.write(source.read())              if __name__ == "__main__":    while True:      action = raw_input("Action [split,join]?\n").strip()    if action == "split":      file_source = raw_input("File to be split [path]?\n").strip()      dir_target = raw_input("Directory to store part files [path]?\n").strip()      chunk_size = int(raw_input("Chunk size [positive integer MB]?\n"))*(10**6)    elif action == "join":      dir_source = raw_input("Directory containing part files [path]?\n").strip()      file_target = raw_input("Name of file to be recreated [path]?\n").strip()    else:       print "The action is impossible."         continue          if action == "split":            method = split      args = file_source,dir_target,chunk_size          else:       method = join       args = dir_source,file_target        try:      method(*args)      print "Action complete"    except RuntimeError as err:      print err            print       continue        break            