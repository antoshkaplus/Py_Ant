import Tkinter as tkimport tkMessageBox as tkMB  from const import * import controls as cl  class InitValues(cl.DataEntries):  def __init__(self,master=None,**options):      texts = ["Beam lrngth (m):",             "Bob mass (kg):",             "Spring stiffness (H/m):",             "Outer pulse (kg*m/s):"]    vars = [tk.DoubleVar() for i in range(len(texts))]    data_width = 10        cl.DataEntries.__init__(self,master,texts,vars,data_width,**options)    self.vars = vars      def get_vals(self):    return [v.get() for v in self.vars]    def set_state(self,state):    """     tk.DISABLED    tk.NORMAL    """    for ent in self.ents:      ent.config(state=state)   # separator   class Notifier(tk.Checkbutton):  def __init__(self,master=None):    self.var = tk.BooleanVar()    text = ("notify that the model"+            "\n"+"will be broken")    tk.Checkbutton.__init__(self,master,text=text,variable=self.var)      def get_val(self):    return self.var.get()       # separator            class ITimeScale:  """  interface for TimeScale container  """  def set_time_scale(self,val): pass  class TimeScale(tk.Frame):  def __init__(self,master,obs,**options):    tk.Frame.__init__(self,master,**options)    self.obs = obs        self.var = tk.DoubleVar()        tk.Label(self,text="Time scale:").pack(side=tk.TOP)    tk.Entry(self,textvariable=self.var,width=6).pack(side=tk.LEFT)    but = tk.Button(self,text="apply",command=self.handler)    but.pack(side=tk.RIGHT)    self.but = but    def get_val(self):    return self.var.get()    def set_state(self,state):    """     tk.DISABLED    tk.NORMAL    """    self.but.config(state=state)    def handler(self):    self.obs.set_time_scale(self.get_val())    # separator            class ModelInfo(cl.DataLabels):  def __init__(self,master=None,**options):    tk.Frame.__init__(self,master,**options)        texts = ["Past model time (s):",             "Deflection (rad):"]    vars = [tk.StringVar() for i in range(len(texts))]    data_width = 10        self.init_vals = ["0.0","0.0"]        cl.DataLabels.__init__(self,master,texts,vars,data_width,**options)    self.vars = vars        self.set_init_vals()      def set_vals(self,vals):    """     1 var - past model time    2 var - deflection    """    for v_new,v in zip(vals,self.vars):      v.set(v_new)             def set_init_vals(self):    self.set_vals(self.init_vals)           # separator        ############ Panel #############        class Panel(tk.Frame):    def __init__(self,master,model,**options):    tk.Frame.__init__(self,master,**options)    self.model = model        init = InitValues(self,padx=10)    init.pack(side=tk.TOP,expand=tk.YES)    self.init = init        ntf = Notifier(self)    ntf.pack(side=tk.TOP,expand=tk.YES)    self.ntf = ntf        ts = TimeScale(self,model)    ts.pack(side=tk.TOP,expand=tk.YES)    ts.set_state(tk.DISABLED)    self.ts = ts        m_buts = cl.MotionButtons(self,self)    m_buts.pack(side=tk.BOTTOM,expand=tk.YES)    self.m_buts = m_buts        info = ModelInfo(self)    info.pack(side=tk.BOTTOM,expand=tk.YES)    self.info = info    def set_motion(self,motion):    if motion == START:      f = cl.Formula(*self.init.get_vals())          if self.ntf.get_val() and f.corrupt():        tkMB.showerror("Error","Model is going to break")      else:           self.model.set_formula(f)        self.model.set_time_scale(self.ts.get_val())        self.model.set_motion(START)        elif motion == PAUSE:         self.model.set_motion(PAUSE)    elif motion == FURTHER:      self.model.set_motion(FURTHER)    elif motion == STOP:      self.model.set_motion(STOP)    def update(self,model):    motion = model.motion    self.m_buts.set_motion(motion)    if motion == STOP:          self.info.set_init_vals()      self.init.set_state(tk.NORMAL)      self.ts.set_state(tk.DISABLED)    else:      if motion == START:         self.init.set_state(tk.DISABLED)        self.ts.set_state(tk.NORMAL)      self.info.set_vals(["%7.3f" % self.model.get_time(),                          "%7.3f" % self.model.get_rotation_val()])                  