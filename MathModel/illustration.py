import Tkinter as tkimport numpy as npclass Circle:  def __init__(self,center,radius):    self.center = center    self.radius = radius      def draw(self,canvas,**options):      s,r = self.center,self.radius    return canvas.create_oval(s[0]-r,s[1]-r,s[0]+r,s[1]+r,**options)    def copy(self):    return Circle(self.center,self.radius)     def rotate(self,r,r_pts):    p = self.center    if any(map(lambda x: x is p,r_pts)):      self.center = r.rotate(p)     def scale(self,scl):    self.center = (self.center[0]*scl,self.center[1]*scl)    self.radius *= scl  class Polygon:  def __init__(self,list_of_points):    self.points = list(list_of_points)      def draw(self,canvas,**options):      return canvas.create_polygon(self.points,**options)      def copy(self):    return Polygon(list(self.points))    def rotate(self,r,r_pts):    for i,p in enumerate(self.points):       if any(map(lambda x: x is p,r_pts)):        self.points[i] = r.rotate(p)         def scale(self,scl):    s_pts = self.points    for i,p in enumerate(s_pts):      s_pts[i] = (p[0]*scl,p[1]*scl)    class Rotation:  def __init__(self,pivot,value):    p0,p1 = pivot    c,s = np.cos(value),np.sin(value)        m1 = np.matrix([[ 1., 0.,0.],                    [ 0., 1.,0.],                    [-p0,-p1,1.]])    m2 = np.matrix([[c , s,0.],                    [-s, c,0.],                    [0.,0.,1.]])    m3 = np.matrix([[1.,0.,0.],                    [0.,1.,0.],                    [p0,p1,1.]])    self.M = m1*m2*m3    def rotate(self,p):    v0 = np.matrix([[p[0],p[1],1.]])    v1 = v0*self.M    return (v1[0,0]/v1[0,2],v1[0,1]/v1[0,2])          class Illustration(tk.Canvas):    def __init__(self,master=None,bg="white",**options):    tk.Canvas.__init__(self,master,bg=bg,**options)    self.create_template()     def create_template(self):    self.rot_pts = []    rot_pts = self.rot_pts        ph = 10.        self.pivot = (21.,3.+ph)        self.support = {"shapes":(Polygon([(1.,15.+ph),(24.,15.+ph),(24.,13.+ph),(1.,13.+ph)]),),                    "options":{"fill":"black",                               "outline":"black",                               "width":2}}    self.joint = {"shapes":(Polygon([(21.,3.+ph),(18.,13.+ph),(24.,13.+ph)]),                             Circle(self.pivot,0.5)),                  "options":{"fill":"blue",                             "outline":"blue",                             "width":2}}    rot_pts.append((3.,3.+ph))    self.bob = {"shapes":(Circle(rot_pts[-1],2.),),                "options":{"fill":"red",                           "outline":"red",                           "width":2}}               rot_pts.extend([(3.,3.5+ph),(21.,3.5+ph),(21.,2.5+ph),(3.,2.5+ph)])                                                  self.beam = {"shapes":(Polygon(rot_pts[-4:]),),                 "options":{"fill":"green",                            "outline":"green",                            "width":2}}    rot_pts.extend([(11.,3.+ph),(12.,3.+ph)])                            self.spring = {"shapes":(Polygon(rot_pts[-2:]+[(12.,13.+ph),(11.,13.+ph)]),),                   "options":{"fill":"yellow",                              "outline":"yellow",                              "width":2}}      self.template_size = (25.,16.+ph)    self.rot_val = 0.        self.template_figures = [self.support,self.spring,                             self.beam,self.joint,self.bob]         self.bind("<Configure>",self.resize)    def get_scale(self):    t = self.template_size    try:      scale = min(self.winfo_width()/t[0],                  self.winfo_height()/t[1])    except:       scale = self.get_scale()    return scale        def resize(self,event):    self.draw()    def set_rotation_value(self,rot_val):    self.rot_val = rot_val    self.draw()    def draw(self):     scale = self.get_scale()               r = Rotation(self.pivot,self.rot_val)    for fig in self.template_figures:      for shp in fig["shapes"]:        shp = shp.copy()        shp.rotate(r,self.rot_pts)        shp.scale(scale)                shp.draw(self,state=tk.HIDDEN,tag="new",**fig["options"])    self.itemconfig("new",state=tk.NORMAL)                            self.delete("old")    self.itemconfig("new",tag="old")                        def update(self,model):    self.set_rotation_value(model.get_rotation_val())    if __name__ == "__main__":    i = Illustration()  i.pack(expand=tk.YES,fill=tk.BOTH)    i.mainloop()                                